# In order to compile your application under cygwin
# you might need to define NDK_USE_CYGPATH=1 before calling the ndk-build

USER_LOCAL_PATH:=$(LOCAL_PATH)

USER_LOCAL_C_INCLUDES:=$(LOCAL_C_INCLUDES)
USER_LOCAL_CFLAGS:=$(LOCAL_CFLAGS)
USER_LOCAL_STATIC_LIBRARIES:=$(LOCAL_STATIC_LIBRARIES)
USER_LOCAL_SHARED_LIBRARIES:=$(LOCAL_SHARED_LIBRARIES)
USER_LOCAL_LDLIBS:=$(LOCAL_LDLIBS)

LOCAL_PATH:=$(subst ?,,$(firstword ?$(subst \, ,$(subst /, ,$(call my-dir)))))

LIBBEAUTY_TARGET_ARCH_ABI:=$(TARGET_ARCH_ABI)
LIBBEAUTY_THIS_DIR:=$(patsubst $(LOCAL_PATH)\\%,%,$(patsubst $(LOCAL_PATH)/%,%,$(call my-dir)))
LIBBEAUTY_MK_DIR:=$(dir $(lastword $(MAKEFILE_LIST)))
LIBBEAUTY_3RDPARTY_LIBS_DIR:=@LIBBEAUTY_3RDPARTY_LIBS_DIR_CONFIGCMAKE@
LIBBEAUTY_BASEDIR:=@LIBBEAUTY_BASE_INCLUDE_DIR_CONFIGCMAKE@
LIBBEAUTY_LOCAL_C_INCLUDES:=@LIBBEAUTY_INCLUDE_DIRS_CONFIGCMAKE@
LIBBEAUTY_MODULES:=@LIBBEAUTY_MODULES_CONFIGMAKE@
LIBBEAUTY_SUB_MK:=$(call my-dir)/libbeauty-$(TARGET_ARCH_ABI).mk

ifeq ($(LIBBEAUTY_LIB_TYPE),)
    LIBBEAUTY_LIB_TYPE:=@LIBBEAUTY_LIBTYPE_CONFIGMAKE@
endif

ifeq ($(LIBBEAUTY_LIB_TYPE),SHARED)
    LIBBEAUTY_LIBS:=@LIBBEAUTY_LIBS_CONFIGMAKE@
    LIBBEAUTY_LIB_TYPE:=@LIBBEAUTY_LIBTYPE_CONFIGMAKE@
else
    LIBBEAUTY_LIBS:=$(LIBBEAUTY_MODULES)
    LIBBEAUTY_LIB_TYPE:=@LIBBEAUTY_STATIC_LIBTYPE_CONFIGMAKE@
endif

ifeq ($(LIBBEAUTY_LIB_TYPE),SHARED)
    LIBBEAUTY_3RDPARTY_COMPONENTS:=
    LIBBEAUTY_EXTRA_COMPONENTS:=
else
    include $(LIBBEAUTY_SUB_MK)
endif

ifeq ($(LIBBEAUTY_LIB_TYPE),SHARED)
    LIBBEAUTY_LIBS_DIR:=@LIBBEAUTY_LIBS_DIR_CONFIGCMAKE@
    LIBBEAUTY_LIB_SUFFIX:=so
else
    LIBBEAUTY_LIBS_DIR:=@LIBBEAUTY_LIBS_ARCHIVE_DIR_CONFIGCMAKE@
    LIBBEAUTY_LIB_SUFFIX:=a
    LIBBEAUTY_INSTALL_MODULES:=on
endif

define add_libbeauty_module
    include $(CLEAR_VARS)
    LOCAL_MODULE:=libbeauty_$1
    LOCAL_SRC_FILES:=$(LIBBEAUTY_LIBS_DIR)/liblibbeauty_$1.$(LIBBEAUTY_LIB_SUFFIX)
    include $(PREBUILT_$(LIBBEAUTY_LIB_TYPE)_LIBRARY)
endef

define add_libbeauty_3rdparty_component
    include $(CLEAR_VARS)
    LOCAL_MODULE:=$1
    LOCAL_SRC_FILES:=$(LIBBEAUTY_3RDPARTY_LIBS_DIR)/lib$1.a
    include $(PREBUILT_STATIC_LIBRARY)
endef

ifeq ($(LIBBEAUTY_MK_$(LIBBEAUTY_TARGET_ARCH_ABI)_ALREADY_INCLUDED),)
    ifeq ($(LIBBEAUTY_INSTALL_MODULES),on)
        $(foreach module,$(LIBBEAUTY_LIBS),$(eval $(call add_libbeauty_module,$(module))))
    endif

    $(foreach module,$(LIBBEAUTY_3RDPARTY_COMPONENTS),$(eval $(call add_libbeauty_3rdparty_component,$(module))))

    ifneq ($(LIBBEAUTY_BASEDIR),)
        LIBBEAUTY_LOCAL_C_INCLUDES += $(foreach mod, $(LIBBEAUTY_MODULES), $(LIBBEAUTY_BASEDIR)/modules/$(mod)/include)
    endif

    #turn off module installation to prevent their redefinition
    LIBBEAUTY_MK_$(LIBBEAUTY_TARGET_ARCH_ABI)_ALREADY_INCLUDED:=on
endif

ifeq ($(LIBBEAUTY_LOCAL_CFLAGS),)
    LIBBEAUTY_LOCAL_CFLAGS := -fPIC -DANDROID -fsigned-char
endif

include $(CLEAR_VARS)

LOCAL_C_INCLUDES:=$(USER_LOCAL_C_INCLUDES)
LOCAL_CFLAGS:=$(USER_LOCAL_CFLAGS)
LOCAL_STATIC_LIBRARIES:=$(USER_LOCAL_STATIC_LIBRARIES)
LOCAL_SHARED_LIBRARIES:=$(USER_LOCAL_SHARED_LIBRARIES)
LOCAL_LDLIBS:=$(USER_LOCAL_LDLIBS)

# Details: #10229
ifeq ($(LIBBEAUTY_SKIP_ANDROID_IPP_FIX_1),)
  LOCAL_LDFLAGS += -Wl,--exclude-libs,libippilibbeauty.a
  LOCAL_LDFLAGS += -Wl,--exclude-libs,libippiw.a
else
  ifeq ($(LIBBEAUTY_SKIP_ANDROID_IPP_FIX_2),)
    LOCAL_LDFLAGS += -Wl,-Bsymbolic
  endif
endif

LOCAL_C_INCLUDES += $(LIBBEAUTY_LOCAL_C_INCLUDES)
LOCAL_CFLAGS     += $(LIBBEAUTY_LOCAL_CFLAGS)

ifeq ($(LIBBEAUTY_INSTALL_MODULES),on)
    LOCAL_$(LIBBEAUTY_LIB_TYPE)_LIBRARIES += $(foreach mod, $(LIBBEAUTY_LIBS), libbeauty_$(mod))
else
    $(call __ndk_info,libbeauty: You should ignore warning about 'non-system libraries in linker flags' and 'libbeauty_java' library.)
    $(call __ndk_info,        'LIBBEAUTY_INSTALL_MODULES:=on' can be used to build APK with included libbeauty binaries)
    LOCAL_LDLIBS += -L$(call host-path,$(LOCAL_PATH)/$(LIBBEAUTY_LIBS_DIR)) $(foreach lib, $(LIBBEAUTY_LIBS), -llibbeauty_$(lib))
endif

ifeq ($(LIBBEAUTY_LIB_TYPE),STATIC)
    LOCAL_STATIC_LIBRARIES += $(LIBBEAUTY_3RDPARTY_COMPONENTS)
endif

LOCAL_LDLIBS += $(foreach lib,$(LIBBEAUTY_EXTRA_COMPONENTS), -l$(lib))

#restore the LOCAL_PATH
LOCAL_PATH:=$(USER_LOCAL_PATH)
