SET(LIBBEAUTY_VERSION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/include/version.hpp")
file(STRINGS "${LIBBEAUTY_VERSION_FILE}" LIBBEAUTY_VERSION_PARTS REGEX "#define LIBBEAUTY_VERSION_[A-Z]+[ ]+" )

string(REGEX REPLACE ".+LIBBEAUTY_VERSION_MAJOR[ ]+([0-9]+).*" "\\1" LIBBEAUTY_VERSION_MAJOR "${LIBBEAUTY_VERSION_PARTS}")
string(REGEX REPLACE ".+LIBBEAUTY_VERSION_MINOR[ ]+([0-9]+).*" "\\1" LIBBEAUTY_VERSION_MINOR "${LIBBEAUTY_VERSION_PARTS}")
string(REGEX REPLACE ".+LIBBEAUTY_VERSION_REVISION[ ]+([0-9]+).*" "\\1" LIBBEAUTY_VERSION_PATCH "${LIBBEAUTY_VERSION_PARTS}")
string(REGEX REPLACE ".+LIBBEAUTY_VERSION_STATUS[ ]+\"([^\"]*)\".*" "\\1" LIBBEAUTY_VERSION_STATUS "${LIBBEAUTY_VERSION_PARTS}")

set(LIBBEAUTY_VERSION_PLAIN "${LIBBEAUTY_VERSION_MAJOR}.${LIBBEAUTY_VERSION_MINOR}.${LIBBEAUTY_VERSION_PATCH}")

set(LIBBEAUTY_VERSION "${LIBBEAUTY_VERSION_PLAIN}${LIBBEAUTY_VERSION_STATUS}")

set(LIBBEAUTY_SOVERSION "${LIBBEAUTY_VERSION_MAJOR}.${LIBBEAUTY_VERSION_MINOR}")
set(LIBBEAUTY_LIBVERSION "${LIBBEAUTY_VERSION_MAJOR}.${LIBBEAUTY_VERSION_MINOR}.${LIBBEAUTY_VERSION_PATCH}")

# create a dependency on the version file
# we never use the output of the following command but cmake will rerun automatically if the version file changes
configure_file("${LIBBEAUTY_VERSION_FILE}" "${CMAKE_BINARY_DIR}/junk/version.junk" COPYONLY)

libbeauty_update(LIBBEAUTY_VS_VER_FILEVERSION_QUAD "${LIBBEAUTY_VERSION_MAJOR},${LIBBEAUTY_VERSION_MINOR},${LIBBEAUTY_VERSION_PATCH},0")
libbeauty_update(LIBBEAUTY_VS_VER_PRODUCTVERSION_QUAD "${LIBBEAUTY_VERSION_MAJOR},${LIBBEAUTY_VERSION_MINOR},${LIBBEAUTY_VERSION_PATCH},0")
libbeauty_update(LIBBEAUTY_VS_VER_FILEVERSION_STR "${LIBBEAUTY_VERSION}")
libbeauty_update(LIBBEAUTY_VS_VER_PRODUCTVERSION_STR "${LIBBEAUTY_VERSION}")
libbeauty_update(LIBBEAUTY_VS_VER_PRODUCTNAME_STR "libbeauty library")
libbeauty_update(LIBBEAUTY_VS_VER_COMMENTS_STR "http://libbeauty.org/")
